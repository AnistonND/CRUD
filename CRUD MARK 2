import sqlite3
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk

def conectar():
    return sqlite3.connect("banco.db")

def criar_tabela():
    conexao = conectar()
    cursor = conexao.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS contatos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            email TEXT NOT NULL,
            telefone TEXT NOT NULL,
            endereco TEXT NOT NULL,
            cpf TEXT NOT NULL
        )
    ''')
    conexao.commit()
    conexao.close()

def adicionar_contato():
    nome = entry_nome.get().strip()
    email = entry_email.get().strip()
    telefone = entry_telefone.get().strip()
    endereco = entry_endereco.get().strip()
    cpf = entry_cpf.get().strip()
    
    if nome and email and telefone and endereco and cpf:
        conexao = conectar()
        cursor = conexao.cursor()
        cursor.execute("INSERT INTO contatos (nome, email, telefone, endereco, cpf) VALUES (?, ?, ?, ?, ?)", 
                       (nome, email, telefone, endereco, cpf))
        conexao.commit()
        conexao.close()
        listar_contatos()
        entry_nome.delete(0, tk.END)
        entry_email.delete(0, tk.END)
        entry_telefone.delete(0, tk.END)
        entry_endereco.delete(0, tk.END)
        entry_cpf.delete(0, tk.END)
        messagebox.showinfo("Sucesso", "Contato adicionado com sucesso!")
    else:
        messagebox.showwarning("Atenção", "Preencha todos os campos!")

def listar_contatos():
    for item in tree.get_children():
        tree.delete(item)
    conexao = conectar()
    cursor = conexao.cursor()
    cursor.execute("SELECT * FROM contatos")
    contatos = cursor.fetchall()
    conexao.close()
    for contato in contatos:
        tree.insert("", tk.END, values=contato)

def excluir_contato():
    try:
        selected_item = tree.selection()[0]
        contato_id = tree.item(selected_item)['values'][0]
        conexao = conectar()
        cursor = conexao.cursor()
        cursor.execute("DELETE FROM contatos WHERE id = ?", (contato_id,))
        conexao.commit()
        conexao.close()
        tree.delete(selected_item)
    except IndexError:
        messagebox.showwarning("Atenção", "Selecione um contato para excluir!")

def atualizar_contato():
    try:
        selected_item = tree.selection()[0]
        contato_id = tree.item(selected_item)['values'][0]
        conexao = conectar()
        cursor = conexao.cursor()
        
        cursor.execute("SELECT nome, email, telefone, endereco, cpf FROM contatos WHERE id = ?", (contato_id,))
        contato_atual = cursor.fetchone()
        
        novo_nome = entry_nome.get().strip() or contato_atual[0]
        novo_email = entry_email.get().strip() or contato_atual[1]
        novo_telefone = entry_telefone.get().strip() or contato_atual[2]
        novo_endereco = entry_endereco.get().strip() or contato_atual[3]
        novo_cpf = entry_cpf.get().strip() or contato_atual[4]
        
        cursor.execute("UPDATE contatos SET nome = ?, email = ?, telefone = ?, endereco = ?, cpf = ? WHERE id = ?", 
                       (novo_nome, novo_email, novo_telefone, novo_endereco, novo_cpf, contato_id))
        conexao.commit()
        conexao.close()
        listar_contatos()
        messagebox.showinfo("Sucesso", "Contato atualizado com sucesso!")
    except IndexError:
        messagebox.showwarning("Atenção", "Selecione um contato para atualizar!")

criar_tabela()

root = tk.Tk()
root.title("Agenda de Contatos")
root.geometry("600x450")
root.configure(bg="#f0f0f0")

frame_form = tk.Frame(root, bg="#d9d9d9", padx=10, pady=10)
frame_form.pack(pady=10)

label_nome = tk.Label(frame_form, text="Nome:", bg="#d9d9d9")
label_nome.grid(row=0, column=0)
entry_nome = tk.Entry(frame_form)
entry_nome.grid(row=0, column=1)

label_email = tk.Label(frame_form, text="Email:", bg="#d9d9d9")
label_email.grid(row=1, column=0)
entry_email = tk.Entry(frame_form)
entry_email.grid(row=1, column=1)

label_telefone = tk.Label(frame_form, text="Telefone:", bg="#d9d9d9")
label_telefone.grid(row=2, column=0)
entry_telefone = tk.Entry(frame_form)
entry_telefone.grid(row=2, column=1)

label_endereco = tk.Label(frame_form, text="Endereço:", bg="#d9d9d9")
label_endereco.grid(row=3, column=0)
entry_endereco = tk.Entry(frame_form)
entry_endereco.grid(row=3, column=1)

label_cpf = tk.Label(frame_form, text="CPF:", bg="#d9d9d9")
label_cpf.grid(row=4, column=0)
entry_cpf = tk.Entry(frame_form)
entry_cpf.grid(row=4, column=1)

frame_buttons = tk.Frame(root, bg="#d9d9d9")
frame_buttons.pack(pady=10)

btn_add = tk.Button(frame_buttons, text="Adicionar", command=adicionar_contato, bg="#4caf50", fg="white")
btn_add.grid(row=0, column=0)

btn_update = tk.Button(frame_buttons, text="Atualizar", command=atualizar_contato, bg="#2196f3", fg="white")
btn_update.grid(row=0, column=1)

btn_delete = tk.Button(frame_buttons, text="Excluir", command=excluir_contato, bg="#f44336", fg="white")
btn_delete.grid(row=0, column=2)

tree = ttk.Treeview(root, columns=("ID", "Nome", "Email", "Telefone", "Endereço", "CPF"), show="headings")
tree.heading("ID", text="ID")
tree.heading("Nome", text="Nome")
tree.heading("Email", text="Email")
tree.heading("Telefone", text="Telefone")
tree.heading("Endereço", text="Endereço")
tree.heading("CPF", text="CPF")
tree.pack()

listar_contatos()

root.mainloop()
